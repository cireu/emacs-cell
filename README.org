# Created 2020-02-27 Thu 23:17
#+TITLE: Value with extra information
#+AUTHOR: Zhu Zihao

* Introduction

This library provides a set of "Cell" for Elisp programming. A "Cell" is a
container of single Lisp value, with extra information attached on it.

Currently there are 3 kinds of "Cell" in ~cell.el~

** Option

A Option Cell add the "existence" information for a lisp value.
A Option Cell may in 2 variant, ~Some~ variant means there's a value and
~None~ variant means there's no value.

Option Cell is useful when writing funtion to query a collection. You can use
~None~ variant to present "Not found". When using ~nil~ to present "Not
   fonud" in tranditional Lisp programming style. The caller of your query
function may have mistaken on "Found and get a ~nil~ value" and "Not found".

#+begin_src emacs-lisp
  (defun clear-plist-get (plist key)
    (pcase (plist-member plist key)
      (`(,_k ,v)
        (cell-option-some v))
      (_
       (cell-option-none))))

  (let ((plist '(:key nil)))
    (plist-get plist :key)                ;=> nil
    (plist-get plist :val)                ;=> nil

    (clear-plist-get plist :key)          ;=> Some(nil)
    (clear-plist-get plist :val)          ;=> None
    )
#+end_src

~cell.el~ also provides some facility to operates on a Option Cell.

#+begin_src emacs-lisp
  (let ((some (cell-option-some 1))
        (none (cell-option-none)))
    (cell-option-map some #'1+)           ;=> Some(2)
    (cell-option-map none #'1+)           ;=> None

    (cell-option-if-let (inner some)
        (message "Some(%d)" inner)
      (error "Unreachable!")))
#+end_src

** Box

A Box Cell is like a single-element vector, normally used as minimal mutable
storage.

#+begin_src emacs-lisp
  (let* ((box (cell-box-make "Emacs"))
         (lst (list box))
         (vec (vector box)))
    (cl-assert (eq (cell-box-inner (nth 0 lst))
                   (cell-box-inner (aref vec 0))))

    (setf (cell-box-inner (nth 0 lst)) "emacs")
    (cl-assert (eq (cell-box-inner (nth 0 lst))
                   (cell-box-inner (aref vec 0)))))
#+end_src


** Weak

A Weak Cell is like weak pointer in other languages. The reference in Weak
Cell will not be considered in GC. This can help you manage struct with
cyclic reference.

When design a RAII style API in Emacs Lisp, Weak Cell can help you
differentiate "first class" reference and "second class" reference. And
make sure finalizer can be run as expected.

#+begin_src emacs-lisp
  (let ((weakptr (cell-weak-make (list 1 2 3 4))))
    (cl-assert (equal (cell-weak-get weakptr)
                      (cell-option-some (list 1 2 3 4))))
    (garbage-collect)
    ;; value inside weakptr was GCed because nothing other than a weak cell
    ;; held its reference. So `cell-weak-get' will return a None.
    (cl-assert (equal (cell-weak-get weakptr)
                      (cell-option-none))))
#+end_src

* Contributions

Please report an issue or PR if you encounter any problem when using the library.
